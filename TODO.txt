ERR 2025-04-25 10:10:08 controllers/dashboard-controller.js:96:13 addFoodEaten 
--->  TypeError: Cannot read properties of undefined (reading 'insertId')
    at Object.addFoodEaten (file:///Users/michaelstump/Projects/DietApp/controllers/dashboard-controller.js:94:30)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
ERR 2025-04-25 10:10:08 mysql/index.js:56:13 insertInto 
--->  TypeError: Bind parameters must not contain undefined. To pass SQL NULL specify JS null
    at /Users/michaelstump/Projects/DietApp/node_modules/mysql2/lib/base/connection.js:660:17
    at Array.forEach (<anonymous>)
    at PoolConnection.execute (/Users/michaelstump/Projects/DietApp/node_modules/mysql2/lib/base/connection.js:652:22)
    at /Users/michaelstump/Projects/DietApp/node_modules/mysql2/lib/base/pool.js:172:14
    at /Users/michaelstump/Projects/DietApp/node_modules/mysql2/lib/base/pool.js:43:37
    at process.processTicksAndRejections (node:internal/process/task_queues:85:11)


TODO - ask if you can get 19th off then you and tio will have a nice long weekend for dokapon 

NEXT!!! 
    -- set up font awesome AND pick a font??
    THIS INSTALLTION IS THE SIMPLE WAY.. MAYBE DO THE MORE COMPLEX VERSION??
    ✅ 1. Install Font Awesome -terminal
    npm install @fortawesome/fontawesome-free
    ✅ 2. In your HTML file
    Add this inside the <head> tag:
    <link rel="stylesheet" href="/fa/css/all.min.css">
    ✅ 3. Copy Font Awesome assets to your public folder - terminal
    mkdir -p public/fa
    cp -r node_modules/@fortawesome/fontawesome-free/* public/fa/

PROBLEM!! - users could flood the db with custom food....

- add image_url to food table
- use a default image for ones that don't exist

- way to add custom food
    // have a table with [name, ingredient, ingr_calories]
    // store each ingredient they add to a db and make a join table to combine custom food with ingredient???

way to add food to previous day if forgotten

<section class="tab-content" data-name="data-seo-html" data-group="data">
// use this style to search.. seems cool!!
const inputQuery = 'section[data-name="data-seo-html"] textarea'
const inputs = Array.from(document.querySelectorAll(inputQuery))

- sign up form jumps around whenever you unfocus on the form, because the messae disappears
    // to fix, make the message spacing there even when the string is empty.
        // set the space to be a <br> whenever there is no text??
            // or just set it to a bunch of empty spaces ???


custom food input
    // have buttons to click and add more fields?


downwards arrow
::after
border: 3px solid transparent;
    border-radius: 2px;
    border-right: 0;
    border-top: 0;
    content: " ";
    display: block;
    height: .625em;
    margin-top: -.4375em;
    pointer-events: none;
    position: absolute;
    top: 50%;
    transform: rotate(-45deg);
    transform-origin: center;
    width: .625em;


setup page
// TODO confirmation screen?
        // errors for when parts of each form aren't filled out...

- add link to setup from dashboard even when filled out?
    - popular values from db if they exist.

- make footer date not hard coded..

-- change LOG split after deciding name!! (in global file)

- save where the user wanted to go before forcing them to go to the login page, then redirect to there

- change home, login etc links when signed in
- make sure can't sign up or log in when already logged in

RESEARCH
- 

oder... todo
- find api to get food data and add to daily amount..
- store data for test profiles (calories)
- basic styling
- create graph etc based on recorded data
- phone feature with openai to get/store food data

FONT AWESOME!!!!!!!!!!!!

- HIDE PASSWORD IN LOGIN/SIGNUP FORM AND REPLACE WITH *s. Have button to toggle view or not...
- forgot password button - send to email, then to reset
- when signing up - need to check if username or password is unique (sql will do this with primary keys..)

1 - send back the WHOLE html with the form info there (i guess read the html file then update the fields?)
or
2 - use fetch and json (better?) and then only have to touch cookies if sign in was successful


daily data
- user foreign key
- DATE
- calories
- weight
- some nutriants?
- food eaten (ref to other table?) // probably not necessary
    -- way to finalize and save total foods? that way users forgetting don't save just 400 kcal or somthing...


tables:
- users
username NOT NULL UNIQUE
name (first / second?) OPTIONAL
gender
age (dob) DATE
weight
height
goal weight?
weekly goal (+/- INT)???
activity level [0-4]

Sedentary	1.2	Office worker, little/no exercise - 0
Lightly Active	1.375	Light exercise (1-3 days/week) - 1
Moderately Active	1.55	Moderate exercise (3-5 days/week) - 2
Very Active	1.725	Hard exercise (6-7 days/week) - 3
Super Active	1.9	Athletes, physical labor jobs - 4

{sex, age, weight, height} = BMR
BMR * activity level = TDEE (Total Daily Energy Expenditure)

- stored food (previous eaten..?)
user foreign key
    // need join table
- id
- food info (multiple columns..)
- 

JOIN 
- user id
- food id
- how often eaten

data table? - used to show history 
user foreign key
DATE
calories eaten
weight for that day

today's food - MANY TO MANY







ideas:

- front page should have '0/2000' box always on display
    - text under saying deficit or not and how much

- dashboard has popular food choices?
    - or or favourite food items (ones you recently ate or often eat)

- once a week prompts you to enter weight?

- graphs to track progess

- set goals?

















/my-node-app
│
├── /public/               # Static files (HTML, CSS, JS)
│   ├── index.html
│   ├── style.css
│   └── script.js
│
├── /routes/               # Route handlers (for different HTTP endpoints)
│   ├── home.js
│   └── about.js
│
├── /controllers/          # Logic for handling requests (optional)
│   ├── homeController.js
│   └── aboutController.js
│
├── /models/               # Data handling (like database or business logic)
│   └── userModel.js
│
├── /views/                # Template files (if using a templating engine)
│   └── home.pug
│
├── /middleware/           # Custom middleware (like logging, auth)
│   └── logger.js
│
├── /utils/                # Utility functions (helpers, file reading, etc.)
│   └── fileUtils.js
│
├── server.js              # Main server file (entry point)
├── package.json           # Project metadata and dependencies
└── .gitignore             # Git ignore file (for excluding node_modules, etc.)
