ERR 2025-04-25 10:10:08 controllers/dashboard-controller.js:96:13 addFoodEaten 
--->  TypeError: Cannot read properties of undefined (reading 'insertId')
    at Object.addFoodEaten (file:///Users/michaelstump/Projects/DietApp/controllers/dashboard-controller.js:94:30)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
ERR 2025-04-25 10:10:08 mysql/index.js:56:13 insertInto 
--->  TypeError: Bind parameters must not contain undefined. To pass SQL NULL specify JS null
    at /Users/michaelstump/Projects/DietApp/node_modules/mysql2/lib/base/connection.js:660:17
    at Array.forEach (<anonymous>)
    at PoolConnection.execute (/Users/michaelstump/Projects/DietApp/node_modules/mysql2/lib/base/connection.js:652:22)
    at /Users/michaelstump/Projects/DietApp/node_modules/mysql2/lib/base/pool.js:172:14
    at /Users/michaelstump/Projects/DietApp/node_modules/mysql2/lib/base/pool.js:43:37
    at process.processTicksAndRejections (node:internal/process/task_queues:85:11)


TODO - ask if you can get 19th off then you and tio will have a nice long weekend for dokapon 

back db
mysqldump -u [username] -p [database_name] > backup.sql
e.g. mysqldump -u root -p my_database > my_database_backup.sql
restore
mysql -u [username] -p [database_name] < backup.sql
e.g. mysql -u root -p my_database < my_database_backup.sql
////
    Make sure the database (my_database) already exists before running the restore. You can create it like this:
    mysql -u root -p -e "CREATE DATABASE my_database"
////



- maybe - click food cards, bring up details box
    // i.e. how many times eaten, protein??

PROBLEM!! - users could flood the db with custom food....

- way to add custom food
    // have a table with [name, ingredient, ingr_calories]
    // store each ingredient they add to a db and make a join table to combine custom food with ingredient???

way to add food to previous day if forgotten

<section class="tab-content" data-name="data-seo-html" data-group="data">
// use this style to search.. seems cool!!
const inputQuery = 'section[data-name="data-seo-html"] textarea'
const inputs = Array.from(document.querySelectorAll(inputQuery))

- sign up form jumps around whenever you unfocus on the form, because the messae disappears
    // to fix, make the message spacing there even when the string is empty.
        // set the space to be a <br> whenever there is no text??
            // or just set it to a bunch of empty spaces ???

- turn setup form's date input into 3 separate inputs...


custom food input
    // have buttons to click and add more fields?


downwards arrow
::after
border: 3px solid transparent;
    border-radius: 2px;
    border-right: 0;
    border-top: 0;
    content: " ";
    display: block;
    height: .625em;
    margin-top: -.4375em;
    pointer-events: none;
    position: absolute;
    top: 50%;
    transform: rotate(-45deg);
    transform-origin: center;
    width: .625em;


setup page
// TODO confirmation screen?
        // errors for when parts of each form aren't filled out...

- add link to setup from dashboard even when filled out?
    - popular values from db if they exist.

-- change LOG split after deciding name!! (in global file)

- save where the user wanted to go before forcing them to go to the login page, then redirect to there

add a favourites table??

RESEARCH
- 

oder... todo
- find api to get food data and add to daily amount..
- store data for test profiles (calories)
- basic styling
- create graph etc based on recorded data
- phone feature with openai to get/store food data

FONT AWESOME!!!!!!!!!!!!

- forgot password button - send to email, then to reset
- email confirmation when signing up...












fonts used..


<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Carter+One&display=swap" rel="stylesheet">

.carter-one-regular {
  font-family: "Carter One", system-ui;
  font-weight: 400;
  font-style: normal;
}
<style>
@import url('https://fonts.googleapis.com/css2?family=Carter+One&display=swap');
</style>




















/my-node-app
│
├── /public/               # Static files (HTML, CSS, JS)
│   ├── index.html
│   ├── style.css
│   └── script.js
│
├── /routes/               # Route handlers (for different HTTP endpoints)
│   ├── home.js
│   └── about.js
│
├── /controllers/          # Logic for handling requests (optional)
│   ├── homeController.js
│   └── aboutController.js
│
├── /models/               # Data handling (like database or business logic)
│   └── userModel.js
│
├── /views/                # Template files (if using a templating engine)
│   └── home.pug
│
├── /middleware/           # Custom middleware (like logging, auth)
│   └── logger.js
│
├── /utils/                # Utility functions (helpers, file reading, etc.)
│   └── fileUtils.js
│
├── server.js              # Main server file (entry point)
├── package.json           # Project metadata and dependencies
└── .gitignore             # Git ignore file (for excluding node_modules, etc.)
